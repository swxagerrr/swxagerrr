| Тема                                                                                   | Описание функции                                                                                           | Пример кода                                                                                                  |
|----------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|
| Объявление и использование переменных                                                 | Объявление переменных с помощью let, const, var.                                                          | let x = 10; const y = 'Hello'; var z = true;                                                                |
| Арифметические и логические операции                                                  | Арифметические (+, -, *, /) и логические (&&, ||, !) операции.                                            | let a = 5 + 3; let b = (a > 5) && (a < 10);                                                                 |
| Условные операторы (if-else, switch-case)                                            | Ветвление логики с помощью if-else и switch.                                                              | if (x === 1) { console.log('One'); } else { console.log('Other'); } switch(x) { case 1: ... }                |
| Циклы (for, while, do-while)                                                         | Повторение блоков кода с помощью циклов for, while, do-while.                                             | for(let i=0; i<3; i++) { console.log(i); } let j=0; while(j<3) { console.log(j); j++; }                      |
| Функции (определение и вызов)                                                        | Определение функций через function или стрелочные функции, вызов по имени.                                 | function sum(a,b){return a+b;} const mul = (x,y) => x*y;                                                     |
| Работа с массивами и структурами данных                                              | Массивы — упорядоченные коллекции, объекты — структуры с ключами и значениями.                            | let arr = [1,2,3]; let obj = {name:'Alice',age:25};                                                         |
| Ввод и вывод данных                                                                   | Вывод через console.log, ввод с помощью модуля readline.                                                  | const rl = require('readline').createInterface({input:process.stdin,output:process.stdout}); rl.question('Name? ', ans => {console.log(ans); rl.close();}); |
| Работа с файлами                                                                      | Модуль fs для чтения и записи файлов.                                                                     | const fs = require('fs'); fs.writeFileSync('file.txt','Hello'); console.log(fs.readFileSync('file.txt','utf8')); |
| Объектно-ориентированное программирование (классы, наследование, полиморфизм)        | Классы с class, наследование через extends, методы и свойства.                                            | class Animal {constructor(name){this.name=name;} speak(){console.log(this.name+' sound');}} class Dog extends Animal {speak(){console.log(this.name+' barks');}} |
| Управление памятью (явное или автоматическое)                                        | Автоматический сборщик мусора, ручное управление отсутствует.                                             | let obj = {}; obj = null; // объект будет собран сборщиком мусора                                            |
| Обработка исключений                                                                  | Блоки try-catch для перехвата и обработки ошибок.                                                        | try {throw new Error('Oops');} catch(e) {console.log(e.message);}                                            |
| Работа с сетью (сокеты, HTTP запросы)                                                | Модуль http для создания серверов и обработки запросов.                                                  | const http = require('http'); http.createServer((req,res)=>{res.end('Hello');}).listen(3000);                |
| Многопоточность (параллельное выполнение задач)                                      | Асинхронность через колбэки, промисы и async/await.                                                      | async function f(){await new Promise(r=>setTimeout(r,1000)); console.log('Done');} f();                      |
| Работа с базами данных                                                                | Использование драйверов, например, mongodb или mysql.                                                   | const MongoClient = require('mongodb').MongoClient; // подключение и операции с БД                           |
| Графический интерфейс пользователя (GUI)                                             | Использование Electron для создания кроссплатформенных GUI-приложений.                                  | const {app,BrowserWindow} = require('electron'); app.whenReady().then(()=>{new BrowserWindow().loadFile('index.html');}); |
| Создание и использование модулей/библиотек                                           | Экспорт через module.exports, импорт через require.                                                     | // lib.js module.exports = () => 'Hello'; // main.js const lib = require('./lib'); console.log(lib());         |
| Регулярные выражения                                                                  | Использование литералов /pattern/ и объекта RegExp.                                                    | let re = /hello/i; console.log(re.test('Hello world'));                                                       |
| Работа с датами и временем                                                           | Объект Date для работы с датами и временем.                                                            | let now = new Date(); console.log(now.toISOString());                                                        |
| Динамическая типизация (опционально)                                                 | JavaScript — динамически типизированный язык, типы определяются во время выполнения.                     | let x = 10; x = 'text'; console.log(typeof x);                                                              |
| Рефлексия (опционально)                                                              | Операторы typeof, instanceof и динамическое изменение объектов.                                        | console.log(typeof 123); console.log({} instanceof Object);                                                  |
