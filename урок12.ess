//код на C с использованием malloc и free//
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *ptr = malloc(sizeof(int));  // выделяем память под один int
    if (ptr == NULL) {
        printf("Ошибка выделения памяти\n");
        return 1;
    }
    *ptr = 42;                       // записываем значение
    printf("Значение: %d\n", *ptr);
    free(ptr);                       // освобождаем память
    return 0;
}

//код на C с использованием mmap и munmap вместо malloc и free//
#include <stdio.h>
#include <sys/mman.h>
#include <unistd.h>

int main() {
    size_t size = sizeof(int);
    void *ptr = mmap(NULL, size, PROT_READ | PROT_WRITE,
                     MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    if (ptr == MAP_FAILED) {
        perror("mmap");
        return 1;
    }
    *(int *)ptr = 42;
    printf("Значение: %d\n", *(int *)ptr);
    if (munmap(ptr, size) == -1) {
        perror("munmap");
        return 1;
    }
    return 0;
}

//иммитация работы в Assembler//
section .data
    size equ 4096

section .text
global _start

_start:
    ; mmap syscall
    mov eax, 9          ; syscall number for mmap
    xor edi, edi        ; addr = NULL
    mov esi, size       ; length
    mov edx, 3          ; prot = PROT_READ | PROT_WRITE
    mov r10d, 0x22      ; flags = MAP_PRIVATE | MAP_ANONYMOUS
    mov r8d, -1         ; fd = -1
    xor r9d, r9d        ; offset = 0
    syscall

    ; Сохраняем адрес mmap в rax

    ; munmap syscall
    mov rdi, rax        ; addr
    mov rsi, size       ; length
    mov eax, 11         ; syscall number for munmap
    syscall

    ; выход из программы
    mov eax, 60         ; sys_exit
    xor edi, edi
    syscall

//1 уязвимость//
#include <stdio.h>
#include <string.h>

int main() {
    char buf[10];
    strcpy(buf, "Очень длинная строка, которая переполнит буфер");
    printf("%s\n", buf);
    return 0;
}

//2 уязыимость//
#include <stdlib.h>
#include <stdio.h>

int main() {
    int *p = malloc(sizeof(int));
    *p = 42;
    free(p);
    printf("%d\n", *p);  // использование после free
    return 0;
}

//3 уязвимость//
#include <stdlib.h>

int main() {
    int *p = malloc(sizeof(int));
    free(p);
    free(p);  // двойное освобождение
    return 0;
}
